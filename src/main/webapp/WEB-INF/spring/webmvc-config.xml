<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
						http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<!-- Turns on support for mapping requests to Spring MVC @Controller methods 
		Also registers default Formatters and Validators for use across all @Controllers -->
	<!-- <mvc:annotation-driven conversion-service="applicationConversionService" 
		/> -->
	<mvc:annotation-driven
		content-negotiation-manager="contentNegotiationManager" />
	<bean id="contentNegotiationManager"
		class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<!-- Turn off working out content type based on URL file extension, should 
			fall back to looking at the Accept headers -->
		<property name="favorPathExtension" value="false" />
	</bean>

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources -->
	<mvc:resources location="/" mapping="/**" />

	<!-- Allows for mapping the DispatcherServlet to "/" by forwarding static 
		resource requests to the container's default Servlet -->
	<mvc:default-servlet-handler />

	<bean id="reCaptcha" class="net.tanesha.recaptcha.ReCaptchaImpl"
		p:publicKey="${recaptcha.publicKey}" p:privateKey="${recaptcha.privateKey}">
	</bean>

	<!-- Selects a static view for rendering without the need for an explicit 
		controller -->
	<mvc:view-controller path="/" view-name="home" />
	<mvc:view-controller path="/login.htm" view-name="login" />
	<mvc:view-controller path="/success.htm" view-name="success" />
	<mvc:view-controller path="/chess/index.htm"
		view-name="chess" />
	<mvc:view-controller path="/chess/favourites.htm"
		view-name="favourites" />
	<mvc:view-controller path="/personal/index.htm"
		view-name="personal" />
	<mvc:view-controller path="/personal/myPhotos.htm"
		view-name="myPhotos" />
	<mvc:view-controller path="/personal/familyPhotos.htm"
		view-name="familyPhotos" />
	<mvc:view-controller path="/technology/index.htm"
		view-name="technology" />
	<mvc:view-controller path="/chess/playChess.htm"
		view-name="playChess" />
	<mvc:view-controller path="/uncaughtException" />
	<mvc:view-controller path="/resourceNotFound" />
	<mvc:view-controller path="/dataAccessFailure" />

	<!-- locale change -->

	<!-- In Spring MVC application, if you do not configure the Springâ€™s LocaleResolver, 
		it will use the default AcceptHeaderLocaleResolver, which does not allow 
		to change the locale. To solve it, try declare a SessionLocaleResolver bean 
		in the Spring bean configuration file, it should be suits in most cases -->
	<bean id="localeResolver"
		class="org.springframework.web.servlet.i18n.SessionLocaleResolver"
		p:defaultLocale="en">
	</bean>

	<!-- theme change -->

	<!-- Resolves localized <theme_name>.properties files in the classpath to 
		allow for theme support -->
	<bean id="themeSource"
		class="org.springframework.ui.context.support.ResourceBundleThemeSource"
		p:basenamePrefix="theme-" />

	<!-- Store preferred theme configuration in a cookie -->
	<bean class="org.springframework.web.servlet.theme.CookieThemeResolver"
		id="themeResolver" p:cookieName="theme" p:defaultThemeName="default" />

	<!-- Register "global" interceptor beans to apply to all registered HandlerMappings -->
	<mvc:interceptors>
		<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"
			p:paramName="lang" />
		<bean class="org.springframework.web.servlet.theme.ThemeChangeInterceptor"
			p:paramName="theme" />
	</mvc:interceptors>


	<!-- This bean resolves specific types of exceptions to corresponding logical 
		- view names for error views. The default behaviour of DispatcherServlet 
		- is to propagate all exceptions to the servlet container: this will happen 
		- here with all other types of exceptions. -->
	<!-- <bean -->
	<!-- class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver" -->
	<!-- p:defaultErrorView="uncaughtException"> -->
	<!-- <property name="exceptionMappings"> -->
	<!-- <props> -->
	<!-- <prop key=".DataAccessException">dataAccessFailure</prop> -->
	<!-- <prop key=".NoSuchRequestHandlingMethodException">resourceNotFound</prop> -->
	<!-- <prop key=".TypeMismatchException">resourceNotFound</prop> -->
	<!-- <prop key=".MissingServletRequestParameterException">resourceNotFound</prop> -->
	<!-- </props> -->
	<!-- </property> -->
	<!-- </bean> -->

	<!-- Enable this for integration of file upload functionality -->
	<!-- <bean -->
	<!-- class="org.springframework.web.multipart.commons.CommonsMultipartResolver" -->
	<!-- id="multipartResolver" /> -->

	<!-- <bean class="com.vikas.web.ApplicationConversionServiceFactoryBean" -->
	<!-- id="applicationConversionService" /> -->
	<!-- <bean class="org.springframework.core.convert.ConversionService" -->
	<!-- id="applicationConversionService" /> -->

	<bean class="org.springframework.web.servlet.view.UrlBasedViewResolver"
		id="tilesViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.tiles2.TilesView" />
	</bean>

	<bean class="org.springframework.web.servlet.view.tiles2.TilesConfigurer"
		id="tilesConfigurer">
		<property name="definitions">
			<list>
				<value>/WEB-INF/layouts/layouts.xml</value>
				<!-- Scan views directory for Tiles configurations -->
				<value>/WEB-INF/views/**/views.xml</value>
			</list>
		</property>
	</bean>

</beans>
